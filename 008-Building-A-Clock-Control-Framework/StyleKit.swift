//
//  StyleKit.swift
//  BuildingAClockControlFramework
//
//  Created by Audrey Li on 3/24/15.
//  Copyright (c) 2015 Shomigo.com. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Drawing Methods

    public class func drawClock(#frame: CGRect, numbersColor: UIColor, rimColor: UIColor, tickColor: UIColor, faceColor: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 117, frame.minY + 117)

        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(-116, -116, 232, 232))
        rimColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)


        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 117, frame.minY + 117)

        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(-110, -110, 220, 220))
        faceColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)


        //// Text Drawing
        var textPath = UIBezierPath()
        textPath.moveToPoint(CGPointMake(frame.minX + 110.72, frame.minY + 25.95))
        textPath.addLineToPoint(CGPointMake(frame.minX + 107.22, frame.minY + 28.82))
        textPath.addLineToPoint(CGPointMake(frame.minX + 105.47, frame.minY + 26.75))
        textPath.addLineToPoint(CGPointMake(frame.minX + 111, frame.minY + 22.3))
        textPath.addLineToPoint(CGPointMake(frame.minX + 113.72, frame.minY + 22.3))
        textPath.addLineToPoint(CGPointMake(frame.minX + 113.72, frame.minY + 40))
        textPath.addLineToPoint(CGPointMake(frame.minX + 110.72, frame.minY + 40))
        textPath.addLineToPoint(CGPointMake(frame.minX + 110.72, frame.minY + 25.95))
        textPath.closePath()
        textPath.moveToPoint(CGPointMake(frame.minX + 117.72, frame.minY + 37.25))
        textPath.addLineToPoint(CGPointMake(frame.minX + 124.55, frame.minY + 30.55))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 125.86, frame.minY + 28.94), controlPoint1: CGPointMake(frame.minX + 125.1, frame.minY + 30.02), controlPoint2: CGPointMake(frame.minX + 125.54, frame.minY + 29.48))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 126.35, frame.minY + 27.07), controlPoint1: CGPointMake(frame.minX + 126.19, frame.minY + 28.4), controlPoint2: CGPointMake(frame.minX + 126.35, frame.minY + 27.78))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 125.54, frame.minY + 25.09), controlPoint1: CGPointMake(frame.minX + 126.35, frame.minY + 26.24), controlPoint2: CGPointMake(frame.minX + 126.08, frame.minY + 25.58))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 123.53, frame.minY + 24.35), controlPoint1: CGPointMake(frame.minX + 125, frame.minY + 24.6), controlPoint2: CGPointMake(frame.minX + 124.33, frame.minY + 24.35))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 121.47, frame.minY + 25.21), controlPoint1: CGPointMake(frame.minX + 122.67, frame.minY + 24.35), controlPoint2: CGPointMake(frame.minX + 121.99, frame.minY + 24.64))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 120.53, frame.minY + 27.38), controlPoint1: CGPointMake(frame.minX + 120.96, frame.minY + 25.79), controlPoint2: CGPointMake(frame.minX + 120.64, frame.minY + 26.51))
        textPath.addLineToPoint(CGPointMake(frame.minX + 117.6, frame.minY + 26.93))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 118.22, frame.minY + 24.9), controlPoint1: CGPointMake(frame.minX + 117.68, frame.minY + 26.19), controlPoint2: CGPointMake(frame.minX + 117.89, frame.minY + 25.52))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 119.5, frame.minY + 23.3), controlPoint1: CGPointMake(frame.minX + 118.56, frame.minY + 24.28), controlPoint2: CGPointMake(frame.minX + 118.98, frame.minY + 23.75))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 121.31, frame.minY + 22.24), controlPoint1: CGPointMake(frame.minX + 120.02, frame.minY + 22.85), controlPoint2: CGPointMake(frame.minX + 120.62, frame.minY + 22.5))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 123.57, frame.minY + 21.85), controlPoint1: CGPointMake(frame.minX + 122, frame.minY + 21.98), controlPoint2: CGPointMake(frame.minX + 122.76, frame.minY + 21.85))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 125.79, frame.minY + 22.18), controlPoint1: CGPointMake(frame.minX + 124.34, frame.minY + 21.85), controlPoint2: CGPointMake(frame.minX + 125.08, frame.minY + 21.96))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 127.68, frame.minY + 23.16), controlPoint1: CGPointMake(frame.minX + 126.5, frame.minY + 22.39), controlPoint2: CGPointMake(frame.minX + 127.12, frame.minY + 22.72))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 128.99, frame.minY + 24.79), controlPoint1: CGPointMake(frame.minX + 128.23, frame.minY + 23.6), controlPoint2: CGPointMake(frame.minX + 128.66, frame.minY + 24.15))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 129.47, frame.minY + 27.03), controlPoint1: CGPointMake(frame.minX + 129.31, frame.minY + 25.43), controlPoint2: CGPointMake(frame.minX + 129.47, frame.minY + 26.17))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 129.25, frame.minY + 28.61), controlPoint1: CGPointMake(frame.minX + 129.47, frame.minY + 27.59), controlPoint2: CGPointMake(frame.minX + 129.4, frame.minY + 28.12))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 128.64, frame.minY + 30), controlPoint1: CGPointMake(frame.minX + 129.1, frame.minY + 29.1), controlPoint2: CGPointMake(frame.minX + 128.9, frame.minY + 29.57))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 127.74, frame.minY + 31.24), controlPoint1: CGPointMake(frame.minX + 128.38, frame.minY + 30.43), controlPoint2: CGPointMake(frame.minX + 128.08, frame.minY + 30.85))
        textPath.addCurveToPoint(CGPointMake(frame.minX + 126.62, frame.minY + 32.38), controlPoint1: CGPointMake(frame.minX + 127.4, frame.minY + 31.63), controlPoint2: CGPointMake(frame.minX + 127.03, frame.minY + 32.01))
        textPath.addLineToPoint(CGPointMake(frame.minX + 121.53, frame.minY + 37.25))
        textPath.addLineToPoint(CGPointMake(frame.minX + 129.5, frame.minY + 37.25))
        textPath.addLineToPoint(CGPointMake(frame.minX + 129.5, frame.minY + 40))
        textPath.addLineToPoint(CGPointMake(frame.minX + 117.72, frame.minY + 40))
        textPath.addLineToPoint(CGPointMake(frame.minX + 117.72, frame.minY + 37.25))
        textPath.closePath()
        numbersColor.setFill()
        textPath.fill()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(frame.minX + 114, frame.minY + 7, 6, 8))
        tickColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRectMake(frame.minX + 114, frame.minY + 219, 6, 8))
        tickColor.setFill()
        rectangle2Path.fill()




        //// Group 2
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 117, frame.minY + 117)
        CGContextRotateCTM(context, 90 * CGFloat(M_PI) / 180)



        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRectMake(-3, -110, 6, 8))
        tickColor.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRectMake(-3, 102, 6, 8))
        tickColor.setFill()
        rectangle4Path.fill()



        CGContextRestoreGState(context)


        //// Group 3
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 117, frame.minY + 117)
        CGContextRotateCTM(context, -30 * CGFloat(M_PI) / 180)



        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRectMake(-3, -110, 6, 8))
        tickColor.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRectMake(-3, 102, 6, 8))
        tickColor.setFill()
        rectangle6Path.fill()



        CGContextRestoreGState(context)


        //// Group 4
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 117, frame.minY + 117)
        CGContextRotateCTM(context, -60 * CGFloat(M_PI) / 180)



        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRectMake(-3, -110, 6, 8))
        tickColor.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRectMake(-3, 102, 6, 8))
        tickColor.setFill()
        rectangle8Path.fill()



        CGContextRestoreGState(context)


        //// Group 5
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 117, frame.minY + 117)
        CGContextRotateCTM(context, -120 * CGFloat(M_PI) / 180)



        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRectMake(-3, -110, 6, 8))
        tickColor.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRectMake(-3, 102, 6, 8))
        tickColor.setFill()
        rectangle10Path.fill()



        CGContextRestoreGState(context)


        //// Group 6
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 117, frame.minY + 117)
        CGContextRotateCTM(context, -150 * CGFloat(M_PI) / 180)



        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRectMake(-3, -110, 6, 8))
        tickColor.setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRectMake(-3, 102, 6, 8))
        tickColor.setFill()
        rectangle12Path.fill()



        CGContextRestoreGState(context)


        //// Text 2 Drawing
        let text2Rect = CGRectMake(frame.minX + 98, frame.minY + 185, 38, 40)
        var text2TextContent = NSString(string: "6")
        let text2Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text2Style.alignment = NSTextAlignment.Center

        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBold", size: 25)!, NSForegroundColorAttributeName: numbersColor, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRectWithSize(CGSizeMake(text2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text2Rect);
        text2TextContent.drawInRect(CGRectMake(text2Rect.minX, text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, text2Rect.width, text2TextHeight), withAttributes: text2FontAttributes)
        CGContextRestoreGState(context)


        //// Text 3 Drawing
        let text3Rect = CGRectMake(frame.minX + 188, frame.minY + 97, 38, 40)
        var text3TextContent = NSString(string: "3")
        let text3Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text3Style.alignment = NSTextAlignment.Center

        let text3FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBold", size: 25)!, NSForegroundColorAttributeName: numbersColor, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRectWithSize(CGSizeMake(text3Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text3Rect);
        text3TextContent.drawInRect(CGRectMake(text3Rect.minX, text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, text3Rect.width, text3TextHeight), withAttributes: text3FontAttributes)
        CGContextRestoreGState(context)


        //// Text 4 Drawing
        let text4Rect = CGRectMake(frame.minX + 9, frame.minY + 97, 38, 40)
        var text4TextContent = NSString(string: "9")
        let text4Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text4Style.alignment = NSTextAlignment.Center

        let text4FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBold", size: 25)!, NSForegroundColorAttributeName: numbersColor, NSParagraphStyleAttributeName: text4Style]

        let text4TextHeight: CGFloat = text4TextContent.boundingRectWithSize(CGSizeMake(text4Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text4Rect);
        text4TextContent.drawInRect(CGRectMake(text4Rect.minX, text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, text4Rect.width, text4TextHeight), withAttributes: text4FontAttributes)
        CGContextRestoreGState(context)
    }

    public class func drawClockPlayground(#numbersColor: UIColor, rimColor: UIColor, tickColor: UIColor, faceColor: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color2 = UIColor(red: 0.219, green: 0.373, blue: 0.457, alpha: 1.000)
        let color3 = UIColor(red: 0.290, green: 0.290, blue: 0.290, alpha: 1.000)
        let color4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let color5 = UIColor(red: 0.086, green: 0.846, blue: 0.850, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRectMake(90, 30, 258, 258)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        StyleKit.drawClock(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), numbersColor: color5, rimColor: color2, tickColor: tickColor, faceColor: faceColor)
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(348, 33, 252, 253)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        StyleKit.drawClock(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height), numbersColor: numbersColor, rimColor: rimColor, tickColor: tickColor, faceColor: faceColor)
        CGContextRestoreGState(context)


        //// Symbol 3 Drawing
        let symbol3Rect = CGRectMake(611, 33, 260, 260)
        CGContextSaveGState(context)
        UIRectClip(symbol3Rect)
        CGContextTranslateCTM(context, symbol3Rect.origin.x, symbol3Rect.origin.y)

        StyleKit.drawClock(frame: CGRectMake(0, 0, symbol3Rect.size.width, symbol3Rect.size.height), numbersColor: color4, rimColor: color4, tickColor: color4, faceColor: color3)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfClock(#frame: CGRect, numbersColor: UIColor, rimColor: UIColor, tickColor: UIColor, faceColor: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawClock(frame: frame, numbersColor: numbersColor, rimColor: rimColor, tickColor: tickColor, faceColor: faceColor)

        let imageOfClock = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfClock
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
